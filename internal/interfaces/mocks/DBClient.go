// Code generated by mockery v2.35.4. DO NOT EDIT.

package mocks

import (
	interfaces "github.com/jzavala-globant/bookstore-rest-api-go/internal/interfaces"
	mock "github.com/stretchr/testify/mock"
)

// DBClient is an autogenerated mock type for the DBClient type
type DBClient struct {
	mock.Mock
}

// Execute provides a mock function with given fields: statement
func (_m *DBClient) Execute(statement string) {
	_m.Called(statement)
}

// Ping provides a mock function with given fields:
func (_m *DBClient) Ping() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Query provides a mock function with given fields: statement
func (_m *DBClient) Query(statement string) (interfaces.DBRow, error) {
	ret := _m.Called(statement)

	var r0 interfaces.DBRow
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (interfaces.DBRow, error)); ok {
		return rf(statement)
	}
	if rf, ok := ret.Get(0).(func(string) interfaces.DBRow); ok {
		r0 = rf(statement)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interfaces.DBRow)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(statement)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewDBClient creates a new instance of DBClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewDBClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *DBClient {
	mock := &DBClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
